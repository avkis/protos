# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import auth_pb2 as auth__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in auth_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthStub(object):
    """Auth is service for managing permissions and roles.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/authpb.Auth/Register',
                request_serializer=auth__pb2.RegisterRequest.SerializeToString,
                response_deserializer=auth__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/authpb.Auth/Login',
                request_serializer=auth__pb2.LoginRequest.SerializeToString,
                response_deserializer=auth__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/authpb.Auth/Logout',
                request_serializer=auth__pb2.LogoutRequest.SerializeToString,
                response_deserializer=auth__pb2.LogoutResponse.FromString,
                _registered_method=True)
        self.Activate = channel.unary_unary(
                '/authpb.Auth/Activate',
                request_serializer=auth__pb2.ActivateRequest.SerializeToString,
                response_deserializer=auth__pb2.ActivateResponse.FromString,
                _registered_method=True)
        self.Refresh = channel.unary_unary(
                '/authpb.Auth/Refresh',
                request_serializer=auth__pb2.RefreshRequest.SerializeToString,
                response_deserializer=auth__pb2.RefreshResponse.FromString,
                _registered_method=True)
        self.ChangePassword = channel.unary_unary(
                '/authpb.Auth/ChangePassword',
                request_serializer=auth__pb2.ChangePasswordRequest.SerializeToString,
                response_deserializer=auth__pb2.ChangePasswordResponse.FromString,
                _registered_method=True)
        self.UserById = channel.unary_unary(
                '/authpb.Auth/UserById',
                request_serializer=auth__pb2.UserByIdRequest.SerializeToString,
                response_deserializer=auth__pb2.User.FromString,
                _registered_method=True)
        self.UserByEmail = channel.unary_unary(
                '/authpb.Auth/UserByEmail',
                request_serializer=auth__pb2.UserByEmailRequest.SerializeToString,
                response_deserializer=auth__pb2.User.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/authpb.Auth/UpdateUser',
                request_serializer=auth__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=auth__pb2.User.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/authpb.Auth/DeleteUser',
                request_serializer=auth__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=auth__pb2.DeleteUserResponse.FromString,
                _registered_method=True)
        self.Users = channel.unary_stream(
                '/authpb.Auth/Users',
                request_serializer=auth__pb2.UsersRequest.SerializeToString,
                response_deserializer=auth__pb2.UsersResponse.FromString,
                _registered_method=True)


class AuthServicer(object):
    """Auth is service for managing permissions and roles.
    """

    def Register(self, request, context):
        """Register registers a new user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Login logs in a user and returns an auth token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Activate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Refresh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserByEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Users(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=auth__pb2.RegisterRequest.FromString,
                    response_serializer=auth__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=auth__pb2.LoginRequest.FromString,
                    response_serializer=auth__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=auth__pb2.LogoutRequest.FromString,
                    response_serializer=auth__pb2.LogoutResponse.SerializeToString,
            ),
            'Activate': grpc.unary_unary_rpc_method_handler(
                    servicer.Activate,
                    request_deserializer=auth__pb2.ActivateRequest.FromString,
                    response_serializer=auth__pb2.ActivateResponse.SerializeToString,
            ),
            'Refresh': grpc.unary_unary_rpc_method_handler(
                    servicer.Refresh,
                    request_deserializer=auth__pb2.RefreshRequest.FromString,
                    response_serializer=auth__pb2.RefreshResponse.SerializeToString,
            ),
            'ChangePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePassword,
                    request_deserializer=auth__pb2.ChangePasswordRequest.FromString,
                    response_serializer=auth__pb2.ChangePasswordResponse.SerializeToString,
            ),
            'UserById': grpc.unary_unary_rpc_method_handler(
                    servicer.UserById,
                    request_deserializer=auth__pb2.UserByIdRequest.FromString,
                    response_serializer=auth__pb2.User.SerializeToString,
            ),
            'UserByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.UserByEmail,
                    request_deserializer=auth__pb2.UserByEmailRequest.FromString,
                    response_serializer=auth__pb2.User.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=auth__pb2.UpdateUserRequest.FromString,
                    response_serializer=auth__pb2.User.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=auth__pb2.DeleteUserRequest.FromString,
                    response_serializer=auth__pb2.DeleteUserResponse.SerializeToString,
            ),
            'Users': grpc.unary_stream_rpc_method_handler(
                    servicer.Users,
                    request_deserializer=auth__pb2.UsersRequest.FromString,
                    response_serializer=auth__pb2.UsersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'authpb.Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('authpb.Auth', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Auth is service for managing permissions and roles.
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/Register',
            auth__pb2.RegisterRequest.SerializeToString,
            auth__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/Login',
            auth__pb2.LoginRequest.SerializeToString,
            auth__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/Logout',
            auth__pb2.LogoutRequest.SerializeToString,
            auth__pb2.LogoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Activate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/Activate',
            auth__pb2.ActivateRequest.SerializeToString,
            auth__pb2.ActivateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Refresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/Refresh',
            auth__pb2.RefreshRequest.SerializeToString,
            auth__pb2.RefreshResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/ChangePassword',
            auth__pb2.ChangePasswordRequest.SerializeToString,
            auth__pb2.ChangePasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UserById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/UserById',
            auth__pb2.UserByIdRequest.SerializeToString,
            auth__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UserByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/UserByEmail',
            auth__pb2.UserByEmailRequest.SerializeToString,
            auth__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/UpdateUser',
            auth__pb2.UpdateUserRequest.SerializeToString,
            auth__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authpb.Auth/DeleteUser',
            auth__pb2.DeleteUserRequest.SerializeToString,
            auth__pb2.DeleteUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Users(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/authpb.Auth/Users',
            auth__pb2.UsersRequest.SerializeToString,
            auth__pb2.UsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
